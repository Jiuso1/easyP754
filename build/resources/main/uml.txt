@startuml
enum PrecisionMode {
    SIMPLE
    DOUBLE
}

enum NumberType {
    NORMALIZED
    DENORMALIZED
}

class UserInput {
    - final String text
    - final PrecisionMode precisionMode
    - BigDecimal number
    - final boolean isSpecial
    + UserInput(String text, PrecisionMode precisionMode)
    + PrecisionMode getText()
    + PrecisionMode getPrecisionMode()
    + BigDecimal getNumber()
    + boolean isSpecial()
}

class UserOutput {
    - final PrecisionMode precisionMode
    - final boolean isSpecial
    - final NumberType numberType
    - final BigDecimal number
    - final Calculation calculation
    - final boolean sign
    - final BitSet exponent
    - final BitSet mantissa
    + UserOutput(...)
    + PrecisionMode getPrecisionMode()
    + boolean isSpecial()
    + NumberType getNumberType()
    + BigDecimal getNumber()
    + Calculation getCalculation()
    + boolean getSign()
    + BitSet getExponent()
    + BitSet getMantissa()
}

note bottom of UserOutput: Constructor receives all attributes.

class Calculation{
    - final int excess
    - final int excessMinusOne
    - final BigDecimal decimalY
    - final int y
    - final int integerExponent
    - final BigDecimal   twoRaisedToY
    - final BigDecimal x
    - final ArrayList<BigDecimal> operand
    - final ArrayList<BigDecimal> result
    + Calculation(...)
    + int getExcess()
    + int getExcessMinusOne()
    + BigDecimal getDecimalY()
    + int getY()
    + int getIntegerExponent()
    + BigDecimal getTwoRaisedToY()
    + BigDecimal getX()
    + ArrayList<BigDecimal> getOperand()
    + ArrayList<BigDecimal> getResult()
}

note bottom of Calculation: Constructor receives all attributes.

class Calculator {
    - UserInput userInput
    - final MathContext mathContext
    + Calculator()
    + Calculator(UserInput userInput)
    + UserOutput calculateUserOutput()
    + UserOutput calculateSpecialCase()
    + UserOutput calculateNormalizedCase()
    + UserOutput calculateDenormalizedCase()
    + UserInput getUserInput()
    + void setUserInput(UserInput userInput)
}

Exception <|-- ZeroException

class ZeroException {
    + ZeroException()
}

class Main{
    + static void main(String[] args)
}

Application <|-- ApplicationView

class ApplicationView{
    + void start(Stage primaryStage)
    + void generateOutputTextArea(TextField inputTextField, ComboBox<String> precisionModeComboBox, TextArea outputTextArea)
    + static void main(String[] args)
}
@enduml